[project]
name = "toolbox"
version = "0.1.1"
description = "A collection of scripts, utilites, templates, and tech notes."
requires-python = ">=3.11.0, <=3.14.0"
authors = [
    { name = "Kevin Bowen", email = "kevin.bowen@gmail.com" },
]
maintainers = [
]
license = { text = "MIT" }
readme = "README.md"
keywords = ["django","web-application","template",]

[tool.poetry]
package-mode = false

[tool.poetry.group.dev.dependencies]
coverage = { version = ">=7.0.0, <8.0.0", extras = ["toml"] }
nox = "^2022.8.7"
pip-audit = ">=2.9.0, <3.0.0"
pre-commit = ">=4.0, <5.0"
pytest = ">=8.0, <8.4"
pytest-cov = ">=6.0.0, <7.0"
ruff = ">=0.8, <1.0"
safety = "^2.0"
sphinx = ">= 8.0, <9.0"
sphinx-lint = "1.0"

[tool.ruff]
preview = true
respect-gitignore = true
unsafe-fixes = false

# Same as Black.
line-length = 88
indent-width = 4

# Assume Python 3.14.x
target-version = "py314"

# Exclude a variety of commonly ignored directories.
exclude = [
    ".git",
    # ".mypy_cache",
    # ".nox",
    # ".pytest_cache",
    # ".ruff_cache",
    # "__pycache__",
    # "__pypackages__",
    "htmlcov",
    "migrations",
    "images",
    "media",
]

[tool.ruff.lint]
select = [
    "A",    # flake8-builtins
    "B",    # flake8-bugbear
    "C90",  # mccabe
    "DJ",   # flake8-django
    "E",    # pycodestyle errors
    "F",    # pyflakes
    "I",    # isort
    "S",    # flake8-bandit
    "W",    # pycodestyle warnings
    "RUF",  # ruff checks
]
ignore = [
    "E501",    # line too long ({width} > {limit} characters)
    # "E203",  # slice notation whitespace (not currently supported)
    "E402",    # module level import not at top of file
    "E722",    # do not use bare except
    # "W503",  # (not currently supported)
    "ERA",     # do not autoremove commented out code
]

# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = ["A", "B", "C", "D", "E", "F", "G", "I", "N", "Q", "S", "T", "W", "ANN", "ARG", "BLE", "COM", "DJ", "DTZ", "EM", "ERA", "EXE", "FBT", "ICN", "INP", "ISC", "NPY", "PD", "PGH", "PIE", "PL", "PT", "PTH", "PYI", "RET", "RSE", "RUF", "SIM", "SLF", "TCH", "TID", "TRY", "UP", "YTT"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.per-file-ignores]
# "accounts/tests/factories.py" = ["BLK100"] (Not supported)
# "accounts/tests/*" = ["BLK100"] (Not supported)
# "accounts/tests/*" = ["S101", "S106"]
"docs/conf.py" = ["A001"]

[tool.ruff.lint.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, repspect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"

[build-system]
requires = ["poetry-core>=2.0.0"]
build-backend = "poetry.core.masonry.api"
